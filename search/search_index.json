{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"K-Villain FastAPI Pagination K-villain FastAPI Pagination is SQLAlchemy ORM based pagination. Features SQLAlchemy ORM based Able to custom order_by Fast speed by selecting necessary data","title":"Home"},{"location":"#k-villain-fastapi-pagination","text":"K-villain FastAPI Pagination is SQLAlchemy ORM based pagination.","title":"K-Villain FastAPI Pagination"},{"location":"#features","text":"SQLAlchemy ORM based Able to custom order_by Fast speed by selecting necessary data","title":"Features"},{"location":"license/","text":"License Copyright (c) 2022 villain organization and contributors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"Copyright (c) 2022 villain organization and contributors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"tutorial/","text":"Paginate Installation First of all, you need to install villain-pagination on your local to start. pip install villain-pagination Minimal Example Villain Paginator uses SQLAlchemy ORM. Let's start with a simple example below. You need to import page and paginator function from villain-pagination . page : is a class which used as response_model in your route declaration. paginator : is main functions that will paginate your data. To use paginate, 5 params required. db : is a SQLAlchemy session. model : is a object which you want to paginate. order_by : is a column of the model. page : is a number of a page requested to show. size : is a number of data which will shown in one page. And Here is an example. from typing import Iterator, Any from faker import Faker from fastapi import Depends, FastAPI from sqlalchemy import Column, Integer, String, create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import Session, sessionmaker from villain-pagination import page, paginator engine = create_engine(\"sqlite:///.db\", connect_args={\"check_same_thread\": False}) SessionLocal = sessionmaker(autocommit=True, autoflush=True, bind=engine) Base = declarative_base(bind=engine) fake = Faker() class User(Base): __tablename__ = \"users\" id = Column(Integer, primary_key=True, autoincrement=True) name = Column(String, nullable=False) Base.metadata.create_all() app = FastAPI() @app.on_event(\"startup\") def on_startup() -> None: session = SessionLocal() session.add_all([User(name=fake.name()) for _ in range(100)]) session.flush() session.close() def get_db() -> Iterator[Session]: db = SessionLocal() try: yield db finally: db.close() @app.get(\"/users/\", response_model=page.Page) def get_users(db: Session = Depends(get_db)) -> Any: return paginator.paginate(db = db, model = User, order_by= User.id, page = 0, size = 10 )","title":"paginate"},{"location":"tutorial/#paginate","text":"","title":"Paginate"},{"location":"tutorial/#installation","text":"First of all, you need to install villain-pagination on your local to start. pip install villain-pagination","title":"Installation"},{"location":"tutorial/#minimal-example","text":"Villain Paginator uses SQLAlchemy ORM. Let's start with a simple example below. You need to import page and paginator function from villain-pagination . page : is a class which used as response_model in your route declaration. paginator : is main functions that will paginate your data. To use paginate, 5 params required. db : is a SQLAlchemy session. model : is a object which you want to paginate. order_by : is a column of the model. page : is a number of a page requested to show. size : is a number of data which will shown in one page. And Here is an example. from typing import Iterator, Any from faker import Faker from fastapi import Depends, FastAPI from sqlalchemy import Column, Integer, String, create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import Session, sessionmaker from villain-pagination import page, paginator engine = create_engine(\"sqlite:///.db\", connect_args={\"check_same_thread\": False}) SessionLocal = sessionmaker(autocommit=True, autoflush=True, bind=engine) Base = declarative_base(bind=engine) fake = Faker() class User(Base): __tablename__ = \"users\" id = Column(Integer, primary_key=True, autoincrement=True) name = Column(String, nullable=False) Base.metadata.create_all() app = FastAPI() @app.on_event(\"startup\") def on_startup() -> None: session = SessionLocal() session.add_all([User(name=fake.name()) for _ in range(100)]) session.flush() session.close() def get_db() -> Iterator[Session]: db = SessionLocal() try: yield db finally: db.close() @app.get(\"/users/\", response_model=page.Page) def get_users(db: Session = Depends(get_db)) -> Any: return paginator.paginate(db = db, model = User, order_by= User.id, page = 0, size = 10 )","title":"Minimal Example"},{"location":"tutorial_cursor/","text":"Cursor Based Paginate Installation First of all, you need to install villain-pagination on your local to start. pip install villain-pagination Minimal Example Villain Paginator uses SQLAlchemy ORM. Let's start with a simple example below. You need to import page and paginator function from villain-pagination . page : is a class which used as response_model in your route declaration. paginator : is main functions that will paginate your data. To use paginate, 5 params required. db : is a SQLAlchemy session. model : is a object which you want to paginate. order_by : is a column of the model. cursor : is a number of a reference data requested to show. size : is a number of data which will shown in one page. And Here is an example. from typing import Iterator, Any from faker import Faker from fastapi import Depends, FastAPI from sqlalchemy import Column, Integer, String, create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import Session, sessionmaker from villain-pagination import page, paginator engine = create_engine(\"sqlite:///.db\", connect_args={\"check_same_thread\": False}) SessionLocal = sessionmaker(autocommit=True, autoflush=True, bind=engine) Base = declarative_base(bind=engine) fake = Faker() class User(Base): __tablename__ = \"users\" id = Column(Integer, primary_key=True, autoincrement=True) name = Column(String, nullable=False) Base.metadata.create_all() app = FastAPI() @app.on_event(\"startup\") def on_startup() -> None: session = SessionLocal() session.add_all([User(name=fake.name()) for _ in range(100)]) session.flush() session.close() def get_db() -> Iterator[Session]: db = SessionLocal() try: yield db finally: db.close() @app.get(\"/users/\", response_model=page.Page) def get_users(db: Session = Depends(get_db)) -> Any: return paginator.paginate_cursor(db = db, model = User, order_by= User.id, cursor = 10, size = 10)","title":"Cursor paginate"},{"location":"tutorial_cursor/#cursor-based-paginate","text":"","title":"Cursor Based Paginate"},{"location":"tutorial_cursor/#installation","text":"First of all, you need to install villain-pagination on your local to start. pip install villain-pagination","title":"Installation"},{"location":"tutorial_cursor/#minimal-example","text":"Villain Paginator uses SQLAlchemy ORM. Let's start with a simple example below. You need to import page and paginator function from villain-pagination . page : is a class which used as response_model in your route declaration. paginator : is main functions that will paginate your data. To use paginate, 5 params required. db : is a SQLAlchemy session. model : is a object which you want to paginate. order_by : is a column of the model. cursor : is a number of a reference data requested to show. size : is a number of data which will shown in one page. And Here is an example. from typing import Iterator, Any from faker import Faker from fastapi import Depends, FastAPI from sqlalchemy import Column, Integer, String, create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import Session, sessionmaker from villain-pagination import page, paginator engine = create_engine(\"sqlite:///.db\", connect_args={\"check_same_thread\": False}) SessionLocal = sessionmaker(autocommit=True, autoflush=True, bind=engine) Base = declarative_base(bind=engine) fake = Faker() class User(Base): __tablename__ = \"users\" id = Column(Integer, primary_key=True, autoincrement=True) name = Column(String, nullable=False) Base.metadata.create_all() app = FastAPI() @app.on_event(\"startup\") def on_startup() -> None: session = SessionLocal() session.add_all([User(name=fake.name()) for _ in range(100)]) session.flush() session.close() def get_db() -> Iterator[Session]: db = SessionLocal() try: yield db finally: db.close() @app.get(\"/users/\", response_model=page.Page) def get_users(db: Session = Depends(get_db)) -> Any: return paginator.paginate_cursor(db = db, model = User, order_by= User.id, cursor = 10, size = 10)","title":"Minimal Example"}]}